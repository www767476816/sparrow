// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_protocol.proto

/*
Package rpc_protocol is a generated protocol buffer package.

指定等会文件生成出来的package

It is generated from these files:
	rpc_protocol.proto

It has these top-level messages:
	RegisterServiceRequest
	RegisterServiceResponse
	ServiceItem
	QueryServiceListResponse
	UpdateServiceListRequest
*/
package rpc_protocol

import (
	proto "github.com/golang/protobuf/proto"
	"rpc-demo/protocol/go_protocol"
)
import fmt "fmt"
import math "math"
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
//import go_protocol "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// enum_error_code from public import error.proto
type EnumErrorCode go_protocol.EnumErrorCode

var EnumErrorCode_name = go_protocol.EnumErrorCode_name
var EnumErrorCode_value = go_protocol.EnumErrorCode_value

func (x EnumErrorCode) String() string { return (go_protocol.EnumErrorCode)(x).String() }

const EnumErrorCode_SUCCESS = EnumErrorCode(go_protocol.EnumErrorCode_SUCCESS)
const EnumErrorCode_FAILD = EnumErrorCode(go_protocol.EnumErrorCode_FAILD)

// 注册服务
type RegisterServiceRequest struct {
	ServerType uint32 `protobuf:"varint,1,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	RpcPort    string `protobuf:"bytes,2,opt,name=rpc_port,json=rpcPort" json:"rpc_port,omitempty"`
}

func (m *RegisterServiceRequest) Reset()                    { *m = RegisterServiceRequest{} }
func (m *RegisterServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceRequest) ProtoMessage()               {}
func (*RegisterServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterServiceRequest) GetServerType() uint32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *RegisterServiceRequest) GetRpcPort() string {
	if m != nil {
		return m.RpcPort
	}
	return ""
}

type RegisterServiceResponse struct {
	ErrorCode go_protocol.EnumErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=go_protocol.EnumErrorCode" json:"error_code,omitempty"`
	ServerId  uint32                    `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

func (m *RegisterServiceResponse) Reset()                    { *m = RegisterServiceResponse{} }
func (m *RegisterServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceResponse) ProtoMessage()               {}
func (*RegisterServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterServiceResponse) GetErrorCode() go_protocol.EnumErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return go_protocol.EnumErrorCode_SUCCESS
}

func (m *RegisterServiceResponse) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

// 请求服务列表
type ServiceItem struct {
	ServerId   uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerType uint32 `protobuf:"varint,2,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
}

func (m *ServiceItem) Reset()                    { *m = ServiceItem{} }
func (m *ServiceItem) String() string            { return proto.CompactTextString(m) }
func (*ServiceItem) ProtoMessage()               {}
func (*ServiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceItem) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServiceItem) GetServerType() uint32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *ServiceItem) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServiceItem) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type QueryServiceListResponse struct {
	ErrorCode  go_protocol.EnumErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=go_protocol.EnumErrorCode" json:"error_code,omitempty"`
	ServerList []*ServiceItem            `protobuf:"bytes,2,rep,name=server_list,json=serverList" json:"server_list,omitempty"`
}

func (m *QueryServiceListResponse) Reset()                    { *m = QueryServiceListResponse{} }
func (m *QueryServiceListResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryServiceListResponse) ProtoMessage()               {}
func (*QueryServiceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryServiceListResponse) GetErrorCode() go_protocol.EnumErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return go_protocol.EnumErrorCode_SUCCESS
}

func (m *QueryServiceListResponse) GetServerList() []*ServiceItem {
	if m != nil {
		return m.ServerList
	}
	return nil
}

// 更新服务列表
type UpdateServiceListRequest struct {
	ServerList []*ServiceItem `protobuf:"bytes,1,rep,name=server_list,json=serverList" json:"server_list,omitempty"`
}

func (m *UpdateServiceListRequest) Reset()                    { *m = UpdateServiceListRequest{} }
func (m *UpdateServiceListRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceListRequest) ProtoMessage()               {}
func (*UpdateServiceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateServiceListRequest) GetServerList() []*ServiceItem {
	if m != nil {
		return m.ServerList
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterServiceRequest)(nil), "rpc_protocol.RegisterServiceRequest")
	proto.RegisterType((*RegisterServiceResponse)(nil), "rpc_protocol.RegisterServiceResponse")
	proto.RegisterType((*ServiceItem)(nil), "rpc_protocol.ServiceItem")
	proto.RegisterType((*QueryServiceListResponse)(nil), "rpc_protocol.QueryServiceListResponse")
	proto.RegisterType((*UpdateServiceListRequest)(nil), "rpc_protocol.UpdateServiceListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcService service

type RpcServiceClient interface {
	// 服务注册
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	// 服务请求
	QueryServiceList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*QueryServiceListResponse, error)
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	out := new(RegisterServiceResponse)
	err := grpc.Invoke(ctx, "/rpc_protocol.rpc_service/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) QueryServiceList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*QueryServiceListResponse, error) {
	out := new(QueryServiceListResponse)
	err := grpc.Invoke(ctx, "/rpc_protocol.rpc_service/QueryServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/rpc_protocol.rpc_service/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	// 服务注册
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	// 服务请求
	QueryServiceList(context.Context, *google_protobuf.Empty) (*QueryServiceListResponse, error)
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_protocol.rpc_service/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcService_QueryServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).QueryServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_protocol.rpc_service/QueryServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).QueryServiceList(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_protocol.rpc_service/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_protocol.rpc_service",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _RpcService_RegisterService_Handler,
		},
		{
			MethodName: "QueryServiceList",
			Handler:    _RpcService_QueryServiceList_Handler,
		},
		{
			MethodName: "UpdateServiceList",
			Handler:    _RpcService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_protocol.proto",
}

func init() { proto.RegisterFile("rpc_protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0x4e, 0x0b, 0x79, 0x0f, 0xa6, 0x0f, 0xde, 0x7b, 0x7b, 0xc0, 0x52, 0x4c, 0x24, 0x8d, 0x1a,
	0x4e, 0x25, 0xc1, 0x9b, 0x1e, 0x8d, 0x07, 0x12, 0x0f, 0x58, 0xd0, 0xa3, 0x8d, 0xb4, 0x63, 0xd3,
	0x04, 0xd8, 0x75, 0x77, 0x4b, 0xd2, 0xdf, 0x61, 0xe2, 0xef, 0x35, 0xdd, 0x2d, 0x42, 0x8b, 0xc4,
	0x98, 0x78, 0x9b, 0x7e, 0xfd, 0xf6, 0xfb, 0xe6, 0x9b, 0x19, 0x20, 0x9c, 0x85, 0x01, 0xe3, 0x54,
	0xd2, 0x90, 0x2e, 0x3c, 0x55, 0x90, 0x3f, 0xbb, 0x98, 0xd3, 0x8b, 0x29, 0x8d, 0x17, 0x38, 0x54,
	0xc0, 0x3c, 0x7d, 0x1e, 0xe2, 0x92, 0xc9, 0x4c, 0x53, 0x1d, 0x0b, 0x39, 0xa7, 0x5c, 0x7f, 0xb8,
	0x33, 0xe8, 0xf8, 0x18, 0x27, 0x42, 0x22, 0x9f, 0x22, 0x5f, 0x27, 0x21, 0xfa, 0xf8, 0x92, 0xa2,
	0x90, 0xe4, 0x04, 0x2c, 0x81, 0x7c, 0x8d, 0x3c, 0x90, 0x19, 0x43, 0xdb, 0xe8, 0x1b, 0x83, 0x96,
	0x0f, 0x1a, 0x9a, 0x65, 0x0c, 0x49, 0x17, 0x1a, 0xca, 0x94, 0x72, 0x69, 0x9b, 0x7d, 0x63, 0xd0,
	0xf4, 0x7f, 0x73, 0x16, 0x4e, 0x28, 0x97, 0xae, 0x80, 0xa3, 0x3d, 0x55, 0xc1, 0xe8, 0x4a, 0x20,
	0xb9, 0x02, 0x50, 0xfe, 0x41, 0x48, 0x23, 0xad, 0xda, 0x1e, 0x1d, 0x7b, 0x31, 0xdd, 0x06, 0xc2,
	0x55, 0xba, 0x0c, 0xb6, 0x1c, 0xbf, 0xa9, 0xea, 0x6b, 0x1a, 0x21, 0xe9, 0x41, 0xb3, 0xe8, 0x29,
	0x89, 0x94, 0x67, 0xcb, 0x6f, 0x68, 0x60, 0x1c, 0xb9, 0x14, 0xac, 0xc2, 0x6c, 0x2c, 0x71, 0x59,
	0xe6, 0x1a, 0x65, 0x6e, 0x35, 0x9c, 0xb9, 0x17, 0xae, 0x0d, 0x66, 0xc2, 0xec, 0x9a, 0x8a, 0x65,
	0x26, 0x8c, 0x10, 0xa8, 0xab, 0xa0, 0x75, 0x85, 0xa8, 0xda, 0x7d, 0x35, 0xc0, 0xbe, 0x4b, 0x91,
	0x67, 0x85, 0xed, 0x6d, 0x22, 0xe4, 0xcf, 0xe4, 0xbc, 0xfc, 0x68, 0x6f, 0x91, 0x88, 0x7c, 0xba,
	0xb5, 0x81, 0x35, 0xea, 0x7a, 0xa5, 0xbd, 0xef, 0x64, 0xdd, 0x74, 0x9e, 0x37, 0xe0, 0x3e, 0x80,
	0x7d, 0xcf, 0xa2, 0x27, 0x89, 0xa5, 0xae, 0xf4, 0x4e, 0x2b, 0xba, 0xc6, 0x37, 0x74, 0x47, 0x6f,
	0x26, 0x58, 0x39, 0x51, 0xe8, 0xff, 0xe4, 0x11, 0xfe, 0x56, 0x76, 0x4c, 0x4e, 0xcb, 0x4a, 0x9f,
	0x1f, 0x96, 0x73, 0xf6, 0x05, 0xab, 0x18, 0xa0, 0x0f, 0xff, 0xaa, 0xc3, 0x25, 0x1d, 0x4f, 0x1f,
	0xb6, 0xb7, 0x39, 0x6c, 0xef, 0x26, 0x3f, 0x6c, 0xe7, 0xbc, 0x2c, 0x79, 0x70, 0x29, 0x53, 0xf8,
	0xbf, 0x37, 0x1b, 0x52, 0x79, 0x7c, 0x68, 0x78, 0xce, 0x01, 0xf3, 0x89, 0x31, 0xff, 0xa5, 0x90,
	0x8b, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x7a, 0xf4, 0x0f, 0x99, 0x03, 0x00, 0x00,
}
