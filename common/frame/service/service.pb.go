// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

指定等会文件生成出来的package

It is generated from these files:
	service.proto

It has these top-level messages:
	RegisterServiceRequest
	RegisterServiceResponse
	ServiceItem
	QueryServiceListResponse
	UpdateServiceListRequest
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 注册服务
type RegisterServiceRequest struct {
	ServerId   int32 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerType int32 `protobuf:"varint,2,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
}

func (m *RegisterServiceRequest) Reset()                    { *m = RegisterServiceRequest{} }
func (m *RegisterServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceRequest) ProtoMessage()               {}
func (*RegisterServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterServiceRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *RegisterServiceRequest) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

type RegisterServiceResponse struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *RegisterServiceResponse) Reset()                    { *m = RegisterServiceResponse{} }
func (m *RegisterServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceResponse) ProtoMessage()               {}
func (*RegisterServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterServiceResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 请求服务列表
type ServiceItem struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerType int32  `protobuf:"varint,2,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
}

func (m *ServiceItem) Reset()                    { *m = ServiceItem{} }
func (m *ServiceItem) String() string            { return proto.CompactTextString(m) }
func (*ServiceItem) ProtoMessage()               {}
func (*ServiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceItem) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServiceItem) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *ServiceItem) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServiceItem) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type QueryServiceListResponse struct {
	ErrorCode  int32          `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ServerList []*ServiceItem `protobuf:"bytes,2,rep,name=server_list,json=serverList" json:"server_list,omitempty"`
}

func (m *QueryServiceListResponse) Reset()                    { *m = QueryServiceListResponse{} }
func (m *QueryServiceListResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryServiceListResponse) ProtoMessage()               {}
func (*QueryServiceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryServiceListResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QueryServiceListResponse) GetServerList() []*ServiceItem {
	if m != nil {
		return m.ServerList
	}
	return nil
}

// 更新服务列表
type UpdateServiceListRequest struct {
	ServerList []*ServiceItem `protobuf:"bytes,1,rep,name=server_list,json=serverList" json:"server_list,omitempty"`
}

func (m *UpdateServiceListRequest) Reset()                    { *m = UpdateServiceListRequest{} }
func (m *UpdateServiceListRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceListRequest) ProtoMessage()               {}
func (*UpdateServiceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateServiceListRequest) GetServerList() []*ServiceItem {
	if m != nil {
		return m.ServerList
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterServiceRequest)(nil), "service.RegisterServiceRequest")
	proto.RegisterType((*RegisterServiceResponse)(nil), "service.RegisterServiceResponse")
	proto.RegisterType((*ServiceItem)(nil), "service.ServiceItem")
	proto.RegisterType((*QueryServiceListResponse)(nil), "service.QueryServiceListResponse")
	proto.RegisterType((*UpdateServiceListRequest)(nil), "service.UpdateServiceListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CenterServerService service

type CenterServerServiceClient interface {
	// 服务注册
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	// 服务请求
	QueryServiceList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*QueryServiceListResponse, error)
}

type centerServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCenterServerServiceClient(cc *grpc.ClientConn) CenterServerServiceClient {
	return &centerServerServiceClient{cc}
}

func (c *centerServerServiceClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	out := new(RegisterServiceResponse)
	err := grpc.Invoke(ctx, "/service.CenterServerService/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServerServiceClient) QueryServiceList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*QueryServiceListResponse, error) {
	out := new(QueryServiceListResponse)
	err := grpc.Invoke(ctx, "/service.CenterServerService/QueryServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CenterServerService service

type CenterServerServiceServer interface {
	// 服务注册
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	// 服务请求
	QueryServiceList(context.Context, *google_protobuf.Empty) (*QueryServiceListResponse, error)
}

func RegisterCenterServerServiceServer(s *grpc.Server, srv CenterServerServiceServer) {
	s.RegisterService(&_CenterServerService_serviceDesc, srv)
}

func _CenterServerService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServerServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CenterServerService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServerServiceServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterServerService_QueryServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServerServiceServer).QueryServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CenterServerService/QueryServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServerServiceServer).QueryServiceList(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CenterServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.CenterServerService",
	HandlerType: (*CenterServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _CenterServerService_RegisterService_Handler,
		},
		{
			MethodName: "QueryServiceList",
			Handler:    _CenterServerService_QueryServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for DispatchServerService service

type DispatchServerServiceClient interface {
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type dispatchServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewDispatchServerServiceClient(cc *grpc.ClientConn) DispatchServerServiceClient {
	return &dispatchServerServiceClient{cc}
}

func (c *dispatchServerServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.DispatchServerService/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DispatchServerService service

type DispatchServerServiceServer interface {
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterDispatchServerServiceServer(s *grpc.Server, srv DispatchServerServiceServer) {
	s.RegisterService(&_DispatchServerService_serviceDesc, srv)
}

func _DispatchServerService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchServerServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DispatchServerService/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchServerServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DispatchServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.DispatchServerService",
	HandlerType: (*DispatchServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceList",
			Handler:    _DispatchServerService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for LoginServerService service

type LoginServerServiceClient interface {
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type loginServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoginServerServiceClient(cc *grpc.ClientConn) LoginServerServiceClient {
	return &loginServerServiceClient{cc}
}

func (c *loginServerServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.LoginServerService/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginServerService service

type LoginServerServiceServer interface {
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterLoginServerServiceServer(s *grpc.Server, srv LoginServerServiceServer) {
	s.RegisterService(&_LoginServerService_serviceDesc, srv)
}

func _LoginServerService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServerServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoginServerService/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServerServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.LoginServerService",
	HandlerType: (*LoginServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceList",
			Handler:    _LoginServerService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for LogicServerService service

type LogicServerServiceClient interface {
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type logicServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogicServerServiceClient(cc *grpc.ClientConn) LogicServerServiceClient {
	return &logicServerServiceClient{cc}
}

func (c *logicServerServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.LogicServerService/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogicServerService service

type LogicServerServiceServer interface {
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterLogicServerServiceServer(s *grpc.Server, srv LogicServerServiceServer) {
	s.RegisterService(&_LogicServerService_serviceDesc, srv)
}

func _LogicServerService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServerServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LogicServerService/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServerServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogicServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.LogicServerService",
	HandlerType: (*LogicServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceList",
			Handler:    _LogicServerService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for ItemServerService service

type ItemServerServiceClient interface {
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type itemServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServerServiceClient(cc *grpc.ClientConn) ItemServerServiceClient {
	return &itemServerServiceClient{cc}
}

func (c *itemServerServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.ItemServerService/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ItemServerService service

type ItemServerServiceServer interface {
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterItemServerServiceServer(s *grpc.Server, srv ItemServerServiceServer) {
	s.RegisterService(&_ItemServerService_serviceDesc, srv)
}

func _ItemServerService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServerServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ItemServerService/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServerServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ItemServerService",
	HandlerType: (*ItemServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceList",
			Handler:    _ItemServerService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for ChatServerService service

type ChatServerServiceClient interface {
	// 服务更新
	UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type chatServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServerServiceClient(cc *grpc.ClientConn) ChatServerServiceClient {
	return &chatServerServiceClient{cc}
}

func (c *chatServerServiceClient) UpdateServiceList(ctx context.Context, in *UpdateServiceListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.ChatServerService/UpdateServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatServerService service

type ChatServerServiceServer interface {
	// 服务更新
	UpdateServiceList(context.Context, *UpdateServiceListRequest) (*google_protobuf.Empty, error)
}

func RegisterChatServerServiceServer(s *grpc.Server, srv ChatServerServiceServer) {
	s.RegisterService(&_ChatServerService_serviceDesc, srv)
}

func _ChatServerService_UpdateServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).UpdateServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChatServerService/UpdateServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).UpdateServiceList(ctx, req.(*UpdateServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ChatServerService",
	HandlerType: (*ChatServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceList",
			Handler:    _ChatServerService_UpdateServiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcb, 0x4f, 0xc2, 0x40,
	0x10, 0xc6, 0xd3, 0x82, 0x0f, 0x86, 0xf8, 0x60, 0x55, 0x6c, 0x4a, 0x0c, 0xb5, 0x27, 0x4e, 0x25,
	0xa9, 0x31, 0xf1, 0x8e, 0x1e, 0x48, 0xd0, 0x84, 0x8a, 0x5e, 0x09, 0xb4, 0x63, 0xd9, 0x04, 0xd8,
	0x75, 0x77, 0x31, 0xe9, 0xbf, 0xe6, 0x5f, 0x67, 0xfa, 0xa0, 0x0a, 0xd8, 0x84, 0xc4, 0xe0, 0xad,
	0x3b, 0x3b, 0xfd, 0x7d, 0xdf, 0x7e, 0x33, 0x70, 0x24, 0x51, 0x7c, 0x50, 0x1f, 0x1d, 0x2e, 0x98,
	0x62, 0xe4, 0x20, 0x3b, 0x9a, 0x8d, 0x90, 0xb1, 0x70, 0x8a, 0xed, 0xa4, 0x3c, 0x5e, 0xbc, 0xb5,
	0x71, 0xc6, 0x55, 0x94, 0x76, 0xd9, 0xaf, 0x50, 0xf7, 0x30, 0xa4, 0x52, 0xa1, 0x78, 0x4e, 0xfb,
	0x3d, 0x7c, 0x5f, 0xa0, 0x54, 0xa4, 0x01, 0x95, 0x98, 0x80, 0x62, 0x48, 0x03, 0x43, 0xb3, 0xb4,
	0xd6, 0x9e, 0x77, 0x98, 0x16, 0xba, 0x01, 0x69, 0x42, 0x35, 0xbb, 0x54, 0x11, 0x47, 0x43, 0x4f,
	0xae, 0x21, 0x2d, 0x0d, 0x22, 0x8e, 0xf6, 0x1d, 0x5c, 0x6e, 0x70, 0x25, 0x67, 0x73, 0x89, 0xe4,
	0x0a, 0x00, 0x85, 0x60, 0x62, 0xe8, 0xb3, 0x00, 0x33, 0x72, 0x25, 0xa9, 0x74, 0x58, 0x80, 0x36,
	0x83, 0x6a, 0xf6, 0x47, 0x57, 0xe1, 0xec, 0x6f, 0x36, 0xc8, 0x31, 0xe8, 0x94, 0x1b, 0x25, 0x4b,
	0x6b, 0x55, 0x3c, 0x9d, 0x72, 0x42, 0xa0, 0xcc, 0x99, 0x50, 0x46, 0x39, 0xa9, 0x24, 0xdf, 0x36,
	0x07, 0xa3, 0xbf, 0x40, 0x11, 0x65, 0xaa, 0x3d, 0x2a, 0xd5, 0x96, 0x5e, 0xc9, 0x6d, 0xae, 0x3f,
	0xa5, 0x52, 0x19, 0xba, 0x55, 0x6a, 0x55, 0xdd, 0x73, 0x67, 0x39, 0x88, 0x1f, 0xef, 0x58, 0xba,
	0x8a, 0xe9, 0x76, 0x1f, 0x8c, 0x17, 0x1e, 0x8c, 0x14, 0xae, 0x48, 0xa6, 0xb1, 0xaf, 0x21, 0xb5,
	0xed, 0x90, 0xee, 0xa7, 0x06, 0x67, 0x1d, 0x9c, 0x67, 0x71, 0xe7, 0xa1, 0x93, 0x01, 0x9c, 0xac,
	0xcd, 0x81, 0x34, 0x73, 0xd8, 0xef, 0x93, 0x37, 0xad, 0xe2, 0x86, 0x2c, 0x96, 0x47, 0x38, 0x5d,
	0x8f, 0x8c, 0xd4, 0x9d, 0x74, 0xcf, 0x9c, 0xe5, 0x9e, 0x39, 0x0f, 0xf1, 0x9e, 0x99, 0xd7, 0x39,
	0xad, 0x28, 0x65, 0x37, 0x84, 0x8b, 0x7b, 0x2a, 0xf9, 0x48, 0xf9, 0x93, 0x55, 0xf7, 0x4f, 0x50,
	0xdb, 0x08, 0x8a, 0x7c, 0x03, 0x8b, 0x42, 0x34, 0x0b, 0xbc, 0xb8, 0x01, 0x90, 0x1e, 0x0b, 0xe9,
	0xfc, 0x5f, 0x54, 0xfc, 0xdd, 0xaa, 0xf8, 0x50, 0x8b, 0xb7, 0x60, 0xe7, 0x22, 0x9d, 0xc9, 0x48,
	0xed, 0x54, 0x64, 0xbc, 0x9f, 0x9c, 0x6f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x2c, 0x88,
	0x65, 0xc1, 0x04, 0x00, 0x00,
}
